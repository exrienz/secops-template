# .github/workflows/devsecops.yml
name: DevSecOps Pipeline Template

on:
  workflow_call:
    inputs:
      enable_sca:
        required: false
        type: boolean
        default: true
      enable_sonarqube:
        required: false
        type: boolean
        default: true
      enable_docker_build:
        required: false
        type: boolean
        default: true
      languages:
        required: false
        type: string
        default: "python,javascript,java,php,html,css"

    secrets:
      SONAR_PROJECT_KEY:
        required: false
      SONAR_TOKEN:
        required: false
      SONAR_HOST_URL:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:

  # ----------------------------
  # SCA / SBOM Generation
  # ----------------------------
  sca-scan:
    if: ${{ inputs.enable_sca }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: SBOM Generation (codenotary)
        uses: codenotary/sbom.sh-create@main
        with:
          scan_type: 'grypefs'
          target: '.'

      - name: Save SBOM URL
        run: |
          mkdir -p artifacts
          echo "$SBOM_SHARE_URL" > artifacts/sbom-url.txt

      - name: Upload SBOM Report
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: artifacts/

  # ----------------------------
  # SonarQube Analysis
  # ----------------------------
  sast-sonarqube:
    if: ${{ inputs.enable_sonarqube }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Project Key
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          echo "SONAR_PROJECT_KEY=$REPO_NAME" >> $GITHUB_ENV

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Save Sonar Logs
        run: |
          mkdir -p artifacts
          cp .scannerwork/report-task.txt artifacts/sonarqube-report.txt || true

      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: artifacts/

  # ----------------------------
  # Docker Build & Multi-Language Lint
  # ----------------------------
  docker-build:
    if: ${{ inputs.enable_docker_build }}
    runs-on: ubuntu-latest
    needs: [sca-scan, sast-sonarqube]
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Artifacts
        run: mkdir -p artifacts

      - name: Split languages
        id: split_languages
        run: |
          IFS=',' read -ra LANGS <<< "${{ inputs.languages }}"
          echo "languages=${LANGS[*]}" >> $GITHUB_OUTPUT

      - name: Run Linters
        run: |
          IFS=' ' read -ra LANGS <<< "${{ steps.split_languages.outputs.languages }}"
          for lang in "${LANGS[@]}"; do
            echo "Processing $lang..."
            case "$lang" in
              python)
                pip install --upgrade pip black autopep8
                black . | tee artifacts/python-lint.log
                autopep8 --in-place --recursive . ;;
              javascript)
                npm install -g prettier eslint
                prettier --write . | tee artifacts/js-prettier.log
                npx eslint . --fix | tee artifacts/js-eslint.log ;;
              java)
                curl -sSL -o google-java-format.jar https://github.com/google/google-java-format/releases/download/v1.22.0/google-java-format-1.22-all-deps.jar
                find . -name "*.java" -exec java -jar google-java-format.jar --replace {} + | tee artifacts/java-format.log ;;
              php)
                sudo apt-get update && sudo apt-get install -y php-codesniffer
                phpcbf . | tee artifacts/phpcbf.log || true ;;
              html|css)
                npm install -g prettier stylelint
                prettier --write . | tee artifacts/html-prettier.log
                npx stylelint "**/*.{css,scss}" --fix | tee artifacts/css-stylelint.log || true ;;
            esac
          done

      - name: Upload Lint Reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: artifacts/

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker Image Tags
        id: docker-tags
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          echo "IMAGE_TAG_SHA=$REPO_NAME:${GITHUB_SHA}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=$REPO_NAME:latest" >> $GITHUB_ENV

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG_SHA }}
            ${{ env.IMAGE_TAG_LATEST }}
