name: DevSecOps Pipeline Template

on:
  workflow_call:
    inputs:
      enable_gitleaks:                # 🔹 new switch for gitleaks
        required: false
        type: boolean
        default: true
      enable_sca:
        required: false
        type: boolean
        default: true
      enable_sast:
        required: false
        type: boolean
        default: true
      enable_docker_build:
        required: false
        type: boolean
        default: true
      enable_container_scan:
        required: false
        type: boolean
        default: true
      enable_auto_lint:
        required: false
        type: boolean
        default: true
      languages:
        required: false
        type: string
        default: "python,javascript,java,php,html,css"

    secrets:
      SONAR_PROJECT_KEY:
        required: false
      SONAR_TOKEN:
        required: false
      SONAR_HOST_URL:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:

  # ----------------------------
  # Gitleaks Secret Scan (RUNS FIRST)
  # ----------------------------
  gitleaks-scan:
    if: ${{ inputs.enable_gitleaks }}
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow workflow to continue even if this job fails
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for better secret detection

      - name: Install Gitleaks CLI
        run: |
          # Robust Gitleaks install with fallback to fixed version
          set -euo pipefail
          echo "Installing Gitleaks..."
          
          # Try to get latest version, fallback to known stable version
          LATEST_TAG=$(curl -sS -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/zricethezav/gitleaks/releases/latest 2>/dev/null \
            | jq -r '.tag_name // empty') || LATEST_TAG=""
          
          # Fallback to a known stable version if API fails
          if [ -z "$LATEST_TAG" ]; then
            echo "⚠️ Could not fetch latest version, using fallback version v8.18.4"
            LATEST_TAG="v8.18.4"
          fi
          
          VERSION="${LATEST_TAG#v}"
          echo "Using tag: $LATEST_TAG (version $VERSION)"

          # Map uname arch to gitleaks asset arch naming
          UNAME_M=$(uname -m)
          case "$UNAME_M" in
            x86_64|amd64) ASSET_ARCH="x64" ;;
            aarch64|arm64) ASSET_ARCH="arm64" ;;
            *) 
              echo "❌ Unsupported architecture: $UNAME_M"
              exit 1
              ;;
          esac

          OS="linux"
          ASSET_NAME="gitleaks_${VERSION}_${OS}_${ASSET_ARCH}.tar.gz"
          DOWNLOAD_URL="https://github.com/zricethezav/gitleaks/releases/download/${LATEST_TAG}/${ASSET_NAME}"
          
          echo "Downloading from: $DOWNLOAD_URL"
          
          # Download with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -fsSL "$DOWNLOAD_URL" -o "$ASSET_NAME"; then
              echo "✅ Download successful"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⚠️ Download failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                sleep 2
              else
                echo "❌ Download failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          # Extract and install
          tar -xzf "$ASSET_NAME"
          sudo mv gitleaks /usr/local/bin/gitleaks
          sudo chmod +x /usr/local/bin/gitleaks
          rm -f "$ASSET_NAME"
          
          # Verify installation
          if gitleaks version; then
            echo "✅ Gitleaks installed successfully"
          else
            echo "❌ Gitleaks installation verification failed"
            exit 1
          fi

      - name: Run Gitleaks Scan
        id: gitleaks
        continue-on-error: true  # Allow step to continue even if secrets are found
        run: |
          mkdir -p artifacts
          # run gitleaks CLI and write JSON report
          gitleaks detect --source . --report-format json --report-path artifacts/gitleaks-report.json
          EXIT_CODE=$?
          
          # Check if secrets were found
          if [ $EXIT_CODE -eq 1 ]; then
            echo "⚠️ WARNING: Secrets detected by Gitleaks!"
            echo "secrets_found=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No secrets detected"
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi
          
          exit 0  # Always exit successfully to allow workflow continuation

      - name: Upload Gitleaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: artifacts/gitleaks-report.json

      - name: Comment on PR if secrets found
        if: steps.gitleaks.outputs.secrets_found == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Gitleaks Secret Scan Warning**\n\nPotential secrets have been detected in this PR. Please review the [Gitleaks report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })

  # ----------------------------
  # SCA / SBOM Generation
  # ----------------------------
  sca-scan:
    if: ${{ inputs.enable_sca && always() }}  # Run even if gitleaks fails
    needs: [gitleaks-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: SBOM Generation (codenotary)
        uses: codenotary/sbom.sh-create@main
        with:
          scan_type: 'grypefs'
          target: '.'

      - name: Save SBOM URL
        run: |
          mkdir -p artifacts
          echo "$SBOM_SHARE_URL" > artifacts/sbom-url.txt

      - name: Upload SBOM Report
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: artifacts/

  # ----------------------------
  # SonarQube Analysis
  # ----------------------------
  sast-sonarqube:
    if: ${{ inputs.enable_sast && always() }}  # Run even if gitleaks fails
    needs: [gitleaks-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set Project Key
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          echo "SONAR_PROJECT_KEY=$REPO_NAME" >> $GITHUB_ENV

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Save Sonar Logs
        run: |
          mkdir -p artifacts
          cp .scannerwork/report-task.txt artifacts/sonarqube-report.txt || true

      - name: Upload SonarQube Report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-reports
          path: artifacts/

  # ----------------------------
  # Docker Build, Lint & Container Scan
  # ----------------------------
  docker-build:
    if: ${{ inputs.enable_docker_build && always() }}  # Run even if gitleaks fails
    needs: [gitleaks-scan, sca-scan, sast-sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Artifacts
        run: mkdir -p artifacts

      - name: Split languages
        id: split_languages
        run: |
          IFS=',' read -ra LANGS <<< "${{ inputs.languages }}"
          echo "languages=${LANGS[*]}" >> $GITHUB_OUTPUT

      - name: Run Linters
        if: ${{ inputs.enable_auto_lint }}
        run: |
          IFS=' ' read -ra LANGS <<< "${{ steps.split_languages.outputs.languages }}"
          for lang in "${LANGS[@]}"; do
            echo "Processing $lang..."
            case "$lang" in
              python)
                pip install --upgrade pip black autopep8
                black . | tee artifacts/python-lint.log
                autopep8 --in-place --recursive . ;;
              javascript)
                npm install -g prettier eslint
                prettier --write . | tee artifacts/js-prettier.log
                npx eslint . --fix | tee artifacts/js-eslint.log ;;
              java)
                curl -sSL -o google-java-format.jar https://github.com/google/google-java-format/releases/download/v1.22.0/google-java-format-1.22-all-deps.jar
                find . -name "*.java" -exec java -jar google-java-format.jar --replace {} + | tee artifacts/java-format.log ;;
              php)
                sudo apt-get update && sudo apt-get install -y php-codesniffer
                phpcbf . | tee artifacts/phpcbf.log || true ;;
              html|css)
                npm install -g prettier stylelint
                prettier --write . | tee artifacts/html-prettier.log
                npx stylelint "**/*.{css,scss}" --fix | tee artifacts/css-stylelint.log || true ;;
            esac
          done

      - name: Upload Lint Reports
        if: ${{ inputs.enable_auto_lint }}
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: artifacts/

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker Image Tags
        id: docker-tags
        run: |
          REPO_NAME=$(echo "${GITHUB_REPOSITORY##*/}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]/-/g')
          echo "IMAGE_TAG_SHA=${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:${GITHUB_SHA}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=${{ secrets.DOCKERHUB_USERNAME }}/$REPO_NAME:latest" >> $GITHUB_ENV

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG_SHA }}
            ${{ env.IMAGE_TAG_LATEST }}

      # ----------------------------
      # Trivy Image Scan (inside docker-build job)
      # ----------------------------
      - name: Install Trivy
        if: ${{ inputs.enable_container_scan }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Fetch Trivy HTML Template
        if: ${{ inputs.enable_container_scan }}
        run: |
          wget https://raw.githubusercontent.com/exrienz/trivy-html-template/refs/heads/main/html.tpl
          sudo cp html.tpl /usr/bin/html.tpl

      - name: Run Trivy Scan on Image
        if: ${{ inputs.enable_container_scan }}
        run: |
          mkdir -p artifacts
          trivy image --format template --template "@/usr/bin/html.tpl" \
            -o artifacts/container_va_report.html ${{ env.IMAGE_TAG_LATEST }}

      - name: Upload Trivy Report
        if: ${{ inputs.enable_container_scan }}
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: artifacts/container_va_report.html
