name: DevSecOps Pipeline Template

on:
  workflow_call:
    inputs:
      enable_sca:
        required: false
        type: boolean
        default: true
      enable_bandit:
        required: false
        type: boolean
        default: true
      enable_sonarqube:
        required: false
        type: boolean
        default: true
      enable_docker_build:
        required: false
        type: boolean
        default: true
      languages:
        required: false
        type: string
        default: "python,javascript,java,php,html,css"

    secrets:
      SONAR_PROJECT_KEY:
        required: false
      SONAR_TOKEN:
        required: false
      SONAR_HOST_URL:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

jobs:

  sca-scan:
    if: ${{ inputs.enable_sca }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: SBOM Generation (codenotary)
        uses: codenotary/sbom.sh-create@main
        with:
          scan_type: 'grypefs'
          target: '.'

  sast-sonarqube:
    if: ${{ inputs.enable_sonarqube }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker-build:
    if: ${{ inputs.enable_docker_build }}
    runs-on: ubuntu-latest
    needs: [sca-scan, sast-bandit, sast-sonarqube]
    strategy:
      matrix:
        language: ${{ fromJSON('["' + join(split(inputs.languages, ','), '","') + '"]') }}
    steps:
      - uses: actions/checkout@v3

      # Python
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Node.js (for JS, HTML, CSS)
      - name: Setup Node.js
        if: matrix.language == 'javascript' || matrix.language == 'html' || matrix.language == 'css'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Java
      - name: Setup Java
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Universal Linters
        run: |
          npm install -g prettier eslint stylelint || true
          pip install autopep8 black || true
          sudo apt-get update && sudo apt-get install -y php-codesniffer || true
          curl -L -o /usr/local/bin/google-java-format \
            https://github.com/google/google-java-format/releases/download/v1.22.0/google-java-format-1.22-all-deps.jar || true

      - name: Run Linter/Formatter (Auto-Fix)
        run: |
          case "${{ matrix.language }}" in
            python) black . && autopep8 --in-place --recursive . ;;
            javascript) prettier --write . && npx eslint . --fix ;;
            java) find . -name "*.java" -exec java -jar /usr/local/bin/google-java-format --replace {} + ;;
            php) phpcbf . || true ;;
            html|css) prettier --write . && npx stylelint "**/*.{css,scss}" --fix || true ;;
          esac

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
